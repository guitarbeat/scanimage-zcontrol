ENHANCED DEAD CODE ANALYSIS REPORT
==================================
Generated: 15-Jul-2025 21:05:28

ANALYSIS SUMMARY
----------------
Total functions defined: 336
Total unique function calls: 406
Classes detected: 19
Protected functions: 22
Suspicious functions: 0
Potentially unused functions: 0
Code health score: 100% (336/336 functions actively used)

POTENTIALLY UNUSED FUNCTIONS
----------------------------
No unused functions detected! üéâ

PROTECTED FUNCTIONS (Safe from Removal)
---------------------------------------
These functions are automatically protected:

Class constructor, File entry point:
  ‚Ä¢ BookmarkManager
  ‚Ä¢ BookmarksView
  ‚Ä¢ FoilviewController
  ‚Ä¢ MetricCalculationService
  ‚Ä¢ PlotManager
  ‚Ä¢ ScanImageManager
  ‚Ä¢ StageControlService
  ‚Ä¢ StageView
  ‚Ä¢ UIController
  ‚Ä¢ foilview

MATLAB builtin function:
  ‚Ä¢ add
  ‚Ä¢ build
  ‚Ä¢ clear
  ‚Ä¢ debug
  ‚Ä¢ delete
  ‚Ä¢ error
  ‚Ä¢ get
  ‚Ä¢ info
  ‚Ä¢ initialize
  ‚Ä¢ log
  ‚Ä¢ remove
  ‚Ä¢ smoothData

CALL PATTERN ANALYSIS
---------------------
‚Ä¢ callback calls: 33 (2%)
‚Ä¢ method calls: 570 (28%)
‚Ä¢ regular calls: 1121 (55%)
‚Ä¢ static calls: 296 (15%)
‚Ä¢ Total calls analyzed: 2020

RECOMMENDATIONS (Priority Order)
--------------------------------
1. HIGH PRIORITY - SAFE TO REMOVE: Functions in "Potentially Unused" section
   ‚Üí Start with functions that have no dependencies
   ‚Üí Remove one function at a time and test

2. MEDIUM PRIORITY - REVIEW CAREFULLY: Functions in "Suspicious" section
   ‚Üí Search codebase for string references to function names
   ‚Üí Check UI files for callback references
   ‚Üí Look for dynamic calls using feval() or str2func()

3. LOW PRIORITY - DO NOT REMOVE: Functions in "Protected" section
   ‚Üí These are essential for MATLAB functionality
   ‚Üí Consider if functions are part of public API

ACTIONABLE NEXT STEPS
--------------------
1. VERIFICATION COMMANDS:
   For each unused function, run these searches:

2. SAFE REMOVAL PROCESS:
   ‚Üí Create a backup branch: git checkout -b cleanup-dead-code
   ‚Üí Remove one function at a time
   ‚Üí Run tests after each removal
   ‚Üí Commit changes incrementally

3. TESTING STRATEGY:
   ‚Üí Run full test suite after each function removal
   ‚Üí Test UI functionality if removing methods from UI classes
   ‚Üí Check for runtime errors in dynamic code paths

ANALYSIS LIMITATIONS
-------------------
‚ö†Ô∏è  This analysis may miss:
   ‚Ä¢ Functions called via eval() or evalin()
   ‚Ä¢ Functions referenced in string arrays or cell arrays
   ‚Ä¢ Functions called from external scripts or toolboxes
   ‚Ä¢ Functions used as event handlers in GUI components
   ‚Ä¢ Functions called through reflection or meta-programming

‚úÖ This analysis correctly identifies:
   ‚Ä¢ Direct function calls
   ‚Ä¢ Object method calls (obj.method)
   ‚Ä¢ Static method calls (Class.method)
   ‚Ä¢ Callback function references (@function)
   ‚Ä¢ Dynamic calls via feval() and str2func()

FINAL NOTE: Always verify manually before removing any code.
When in doubt, comment out the function first and test thoroughly.
